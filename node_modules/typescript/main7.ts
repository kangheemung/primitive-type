// 작업 상태를 나타내는 enum을 작성하세요.
// 여기에 작성
enum TaskStatus {
    Pending = "Pending",      // 대기 중
    InProgress = "InProgress",  // 진행 중
    Completed = "Completed",    // 완료됨
    Failed = "Failed"          // 실패
}

function getStatusMessage(status:TaskStatus): string {
    // 여기에 구현
    switch (status) {
        case TaskStatus.Pending:
            return "작업이 대기 중입니다.";
        case TaskStatus.InProgress:
            return "작업이 진행 중입니다.";
        case TaskStatus.Completed:
            return "작업이 완료되었습니다.";
        case TaskStatus.Failed:
            return "작업이 실패했습니다.";
        default:
            // TypeScript에서는 TaskStatus가 모든 케이스를 포괄하지만,
            // 예기치 않은 값이나 향후 확장을 대비하여 기본 케이스를 추가할 수 있습니다.
            // 하지만 TaskStatus 타입을 사용하므로 default 케이스는 보통 도달하지 않습니다.
            return "알 수 없는 작업 상태입니다.";
    }
  }
  
  // 테스트 코드
  console.log(getStatusMessage(TaskStatus.Pending)); // "작업이 대기 중입니다."
  console.log(getStatusMessage(TaskStatus.InProgress)); // "작업이 진행 중입니다."
  console.log(getStatusMessage(TaskStatus.Completed)); // "작업이 완료되었습니다."
  console.log(getStatusMessage(TaskStatus.Failed));     // "작업이 실패했습니다."
  