let a: object={}
// let b: object={name:"noona"}
//let b: {readonly name:string,age?:Number}={name:"noona"}
//?選択できるあってもあり、なくてもいい
//let c: object={name:"noona",age:23}
//let b: {readonly name:string,age?:Number}={name:"noona"}
//let c:{name:string,age:Number} = {name: "noona",age:23}
// b.name = "coding"
//console.log(b.name)
let fruits: string[]=["banana","apple"]
let numbers1:number[]=[1,2,3,4]
let numbers:Array<number>=[1,2,3,4]
//객체 타입은?
//apiタイプ
//毎回定義するの面倒いので先に定義してみましょう。
// interface, type
interface IStudent {//객체만 가능한 부분
    name:string;
    age?:number;
    isStudent:boolean;
}
//인터페이스는 타입보다 제한적이다.객체타입만 정의 할수 있다.
// let students:{name:string , age?:number}[]=[{name: "noona",age:12},{name:"john",age:34}]
// let tuple:[string,number]
// //定義した順番通りに作成しないとエラーになる。
// tuple=["noona",23]
// let tuple1:[boolean,number]
// tuple1=[true,23]
//let b: {name:string|number|boolean,age?:number}={name:"noona",age:23}
type TStudent ={
    name:string,
    age?:number
}
type NewType= number|string//원시타입도 가능 투플 타입도 가능 
type Tuple=[number,string,boolean]
interface NewType1 {
    field :number|string
}
//
let b: IStudent={name:"noona",age:23}
//let c: {name:string,age:number}={name:"noona",age:23}
let c: IStudent={name:"noona",age:23}
//let d: {name:string|number|boolean,age?:number}={name:"asd",age:12}
let d: TStudent={name:"asd",age:12}
//let e: {name:string|number|boolean,age?:number}={name:"asd",age:12}
let e: TStudent={name:"asd",age:12}
