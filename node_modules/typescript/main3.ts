let userName: string; // 예: 이름
let userAge: number; // 예: 나이
let isAdmin: boolean; // 예: 관리자 여부

userName = "Alice";
userAge = 25;
isAdmin = true;
// You can continue using the variable 'userName' here without redeclaring it
console.log(userName);
console.log(userAge);
console.log(isAdmin);

// 변수 선언과 초기값 지정
let productName:String="back"; // 상품 이름
let productPrice:Number=200; // 상품 가격
let isAvailable:boolean=false; // 상품 재고 여부

// 예시 출력
console.log(`상품명: ${productName}, 가격: ${productPrice}, 재고 여부: ${isAvailable}`);
//두 숫자를 더하는 함수를 작성하고, 함수의 매개변수와 반환값에 타입을 지정하세요.
function addNumbers(num1:number,num2:number):number {
    return num1 + num2;
}
console.log(addNumbers(5, 3));

//주어진 값을 받아 문자열로 변환하는 함수를 작성하세요. 
//값이 null 또는 undefined라면 "값이 없습니다"를 반환합니다

function stringifyValue(value) {
    if (value === null || value === undefined){
        return "값이 없습니다";
    }
    // 여기에 구현
    return String(value);
  }
  //아래 함수는 두 값을 비교하여 결과를 반환합니다. 느슨한 동등성(==)과 엄격 동등성(===)의 차이를 이해하고, 함수의 동작 결과를 예측하세요.
  
  function compareValues(a: unknown, b: unknown): string {
    if (a === b) {
      return "엄격한 동등성";
    } else if (a == b) {
      return "느슨한 동등성";
    } else {
      return "동등하지 않음";
    }
  }
  
  // 함수 호출 예시
  console.log(compareValues(5, "5")); // ?느슨한 동등성
  console.log(compareValues(null, undefined)); // ?느슨한 동등성
  console.log(compareValues(false, 0)); // ?동등하지 않음(X) 정답 느슨한 동등성
  console.log(compareValues(NaN, NaN)); // ?엄격한 동등성(X) 정답 동등하지 않음
//   NaN끼리 동일성 연산자(===)를 사용하여 비교할 때 결과가 false로 나오는 이유는 JavaScript의 특별한 동작 방식 때문입니다. 

// NaN은 자신과 일치하지 않는 유일한 값으로, 자기 자신과도 일치하지 않습니다. 따라서 NaN === NaN 비교 시에 false가 반환됩니다.

// 만약 두 개의 NaN 값을 비교하고 싶다면 `isNaN()` 함수를 사용하거나 `Number.isNaN()` 메서드를 활용해야 합니다.
// 이 함수들은 명시적으로 값이 NaN인지를 확인하므로 정확한 결과를 얻을 수 있습니다.
  console.log(compareValues(42, 42)); // ?엄격한 동등성
  // 함수 호출
  console.log(stringifyValue("Hello")); // "Hello"
  console.log(stringifyValue(null)); // "값이 없습니다"

  function isPrimitive(value: unknown): boolean {
    // 여기에 구현
    return (value !== Object(value));
  }
  
  // 함수 호출 예시
  console.log(isPrimitive("Hello")); // true
  console.log(isPrimitive(42)); // true
  console.log(isPrimitive(false)); // true
  console.log(isPrimitive(null)); // true
  console.log(isPrimitive(undefined)); // true
  console.log(isPrimitive({})); // false
  console.log(isPrimitive([])); // false
  